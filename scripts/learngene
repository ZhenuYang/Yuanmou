#!/usr/bin/env python
import argparse
import sys
import os

# 将项目根目录添加到Python路径中，这样解释器才能找到 src/learngene 模块
# os.path.dirname(__file__) -> 获取当前文件 (learngene) 所在的目录 (scripts)
# os.path.join(..., '..') -> 从 scripts 目录返回上一级，即项目根目录
# os.path.abspath(...) -> 获取绝对路径
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.learngene.config import setup_config

def main():
    parser = argparse.ArgumentParser(description="Learngene: 学习基因统一工具包")
    # 创建子命令解析器
    subparsers = parser.add_subparsers(dest="command", required=True, help="可用的子命令")

    # --- 训练祖先模型命令 ---
    parser_train = subparsers.add_parser('train', help='训练一个祖先模型 (Ancestor Model)')
    parser_train.add_argument('--config', required=True, help='指向祖先模型训练配置文件的路径')
    
    # --- 适配后代模型命令 ---
    # 对于 heur_vgg, 提取和适配在一步完成
    # 对于 tleg_vit, 这一步仅做适配，因为祖先模型本身就是基因
    parser_adapt = subparsers.add_parser('adapt', help='使用学习基因初始化并适配一个后代模型 (Descendant Model)')
    parser_adapt.add_argument('--config', required=True, help='指向后代模型适配配置文件的路径')

    args = parser.parse_args()
    
    # 加载指定的配置文件
    cfg = setup_config(args.config)

    # --- 根据配置中的 METHOD_FAMILY 分发任务 ---
    # 使用 .get() 方法安全地获取配置项，如果不存在则返回 None
    method_family = getattr(cfg, 'METHOD_FAMILY', None)
    if not method_family:
        raise ValueError("配置文件中必须指定 'METHOD_FAMILY' (例如: 'heur_vgg' 或 'tleg_vit')")

    print(f"--- 使用算法族 '{method_family}' ---")

    if method_family == 'heur_vgg':
        # 动态导入，避免不必要的依赖加载
        from src.learngene.heur import ancestor as heur_ancestor
        from src.learngene.heur import descendant as heur_descendant

        if args.command == 'train':
            print("--- 开始训练祖先模型 (heur_vgg) ---")
            heur_ancestor.train(cfg)
            print("--- 祖先模型训练完成 ---")
        elif args.command == 'adapt':
            print("--- 开始提取基因并适配后代模型 (heur_vgg) ---")
            heur_descendant.initialize_and_adapt(cfg)
            print("--- 后代模型适配完成 ---")

    elif method_family == 'tleg_vit':
        # 对于TLEG，训练祖先模型和适配后代模型都使用相同的入口
        # 它们的区别在于配置文件本身
        from src.learngene.tleg import main as tleg_main

        if args.command == 'train':
            print("--- 开始训练祖先模型/基因 (tleg_vit) ---")
            tleg_main.main(cfg) # TLEG的main函数处理所有逻辑
            print("--- 祖先模型/基因训练完成 ---")
        elif args.command == 'adapt':
            print("--- 开始适配后代模型 (tleg_vit) ---")
            tleg_main.main(cfg) # 同样使用main函数，配置决定了行为
            print("--- 后代模型适配完成 ---")
    else:
        raise ValueError(f"未知的 METHOD_FAMILY: {method_family}")

if __name__ == '__main__':
    main()